#pragma version >=0.2.0;

#include "utils/constants.func";
#include "utils/op-codes.func";
#include "utils/helpers.func";

(int, int, cell, cell) load_test_data() inline {
	var (gas, stack) = invoke_method(get_jetton_data,[]);
  slice ds = get_data().begin_parse();
  return (
			gas,
      stack.at(0), ;; total_supply
      stack.at(3), ;; content
      stack.at(4)  ;; jetton_wallet_code
  );
}

_ verify_burn_jetton( int query_id, slice resp_dst, int msg_value, int forward_fee, int forward_amount, cell msg ) impure inline {
	{-
	TL-B schema: excesses#d53276db query_id:uint64 = InternalMsgBody;
	Excess message should be sent to resp_dst with all of the msg_value - fees taken to process
	We verify that:
	1) message is sent to resp_dst
	2) attached amount is at least msg_value - forward_fee * 2
	3) op matches excess op
	4) query_id matches request query_id
	-}

	tuple parsed_msg = unsafe_tuple( parse_internal_message( msg ) );

	;;Check dst_addr to be equal to resp_dst
	throw_unless( 701, equal_slices( resp_dst, parsed_msg.at( 4 ) ) );

	int total_sent  = parsed_msg.at( 5 );
	int should_sent = msg_value - jetton_min_storage;

	throw_unless( 702, total_sent >= should_sent );

	slice msg_body = parsed_msg.at( 8 );

	throw_unless( 703, op_burn_notification == msg_body~load_uint( 32 ) );

	throw_unless( 704, query_id == msg_body~load_uint( 64 ) );
}

_ validate_TIP_64( slice content_data ) impure inline {

	int content_layout = content_data~load_uint( 8 );

	;; Check for allowed content_layout
	throw_unless( 305, ( content_layout  == 1 ) | ( content_layout == 0 ) );

	if( content_layout == 1 ){

		;; Check that off-chain URI contains at least one ASCII char
		throw_unless( 306, token_snake_len( content_data ) > 8 );
	} else {
		;; On-chain is stored as dict
		;; Has to be non-empty
        cell meta = content_data.preload_dict();
		throw_if(306, meta.dict_empty?());

		;; Perhaps could go further and test for Optional dict keys
        var (val, found?) = meta.udict_get_ref?(256, "uri"H);
        slice vs = val.begin_parse();
        throw_unless(307, found?);
        throw_unless(308, vs~load_uint(8) == 0);
        throw_unless(309, snake_equal?(vs, test_expected_url));

        (val, found?) = meta.udict_get_ref?(256, "image"H);
        throw_unless(310, found?);
        vs = val.begin_parse();
        throw_unless(311, vs~load_uint(8) == 0);
        throw_unless(312, snake_equal?(vs, test_expected_img));

        (val, found?) = meta.udict_get_ref?(256, "decimals"H);
        throw_unless(313, found?);
        vs = val.begin_parse();
        throw_unless(314, vs~load_uint(8) == 0);
        throw_unless(315, snake_equal?(vs, test_expected_dec));
	}
}

int test_mint(int mint_amount, slice src, int exp_fail?) {


    slice admin_address = set_test_bridge_conf();

    if(src.null?()) {
        src = admin_address;
    }

	;;Non-standardized but widely used message
	var ( gas_success, total_supply, content, code ) = load_test_data();

	int query_id     = rand(1337) + 1;
	int forward_ton  = one_unit / 10;
  int msg_val      = one_unit;
	slice rand_addr  = generate_internal_address_with_custom_data(0, 0, random());
	slice mint_dst   = generate_internal_address_with_custom_data(0, 0, random());
	slice mint_from  = generate_empty_address();

	{-
		In current implementation sends any forward payload provided.
		However for jettons to be successfully creditated on wallet balance
		it should have internal_transfer message format.

        Bridge minter uses custom mint msg format:
        dst_addr:MsgAddr
        mint_amount:Grams
        fwd_amount:Grams
	-}

    ;; Excpected payload to be forwarded to bridge
	cell mint_payload = generate_jetton_internal_transfer_request(query_id, mint_amount, mint_from, admin_address, forward_ton, null(), false ).end_cell();
    ;; Actual mint message body
	builder mint_body = generate_internal_message_body(op_mint, query_id).store_slice(mint_dst)
                                                                         .store_grams(mint_amount)
                                                                         .store_grams(forward_ton);
    int gas_used = 0;

	cell msg = generate_internal_message_custom( 0, 0, 0,  mint_body, src, null(), 0 );

    if ( exp_fail? ) {
        gas_used = invoke_method_expect_fail(recv_internal, [ msg_val, msg_val, msg, mint_body.end_cell().begin_parse() ] );
        ;; test_mint overflow triggers message prior to throwing overflow
        ;; assert_no_actions()
    }
    else {
	    ( gas_used, _ ) = invoke_method( recv_internal, [ msg_val, msg_val, msg, mint_body.end_cell().begin_parse() ] );

	    tuple actions	 = parse_c5();
	    throw_unless(600, actions.tuple_length() == 2); ;;Expect mint log to be emited

	    ( int action_type, cell sent_msg, int mode ) = actions.at(0).untriple();
	    throw_unless(601, action_type == 0);

	    tuple parsed_msg = unsafe_tuple( parse_internal_message( sent_msg ) );

	    {-
	      What do we know about how mint message should look like in general?
	      1) Wallet has to be deployed thus StateInit has to be present
	      2) Our forward payload should be the message body
	      That's what we're going to check for.
	      Rest is very contract specific.
	    -}

	    throw_if(602, parsed_msg.at( 7 ).null?());
	    throw_unless(603, equal_slices(mint_payload.begin_parse(), parsed_msg.at(8)));

	    ;; Also total supply should increase by mint_amount

	  var ( lookup_after, new_supply, _, _ ) = load_test_data();
	  gas_used += lookup_after;
	  throw_unless(604, total_supply + mint_amount == new_supply);
      throw_unless(605, msg_val - jetton_min_storage);

      ;; Now let's test the log message tag
      tuple parsed = assert_log_message_simple(610, log_mint_on_minter, actions.second());

      ;; And log contents
      slice body   = parsed.at(5);
      throw_unless(620, body~load_coins() == new_supply);
      throw_unless(621, body.slice_empty?());

    }

	return gas_used;

}

int __test_mint_not_admin() {
  int mint_amount = one_unit * (rand(100) + 1);
  int gas_failed  = test_mint(mint_amount, generate_internal_address(), true);
  int gas_success = test_mint(mint_amount, null(), false);
  return gas_failed + gas_success;
}

int __test_mint_success() {
    return test_mint(one_unit * (rand(100) + 1), null(), false);
}

int __test_mint_success_max_val() {
    return test_mint((1 << 120) - 1, null(), false);
}

int __test_mint_overflow() {
    ;; First mint 1 jetton
    int mint_success = test_mint(one_unit, null(), false);
    ;; Now should fail because total supply > 2^120 - 1
    int mint_fail    = test_mint((1 << 120) - 1, null(), true);

    return mint_success + mint_fail;
}

int test_burn_notification(int burn_amount, slice src, int exp_fail?) {
	{-
	  burn_notification query_id:uint64 amount:(VarUInteger 16)
	       sender:MsgAddress response_destination:MsgAddress
	       = InternalMsgBody;

	  On receiving burn notification jetton master should
	  1) Decrease total supply by burn_amount.
	  2) Send excess message to the response_destination.

	-}
    slice admin_address = set_test_bridge_conf();

	var ( gas_used, total_supply, content, code ) = load_test_data();

	int query_id    = rand( 1337 ) + 1;
	;; Making sure that source address would be valid jetton address

	slice sender    = generate_internal_address_with_custom_data( 0, 0, random() );

    if(src.null?()) {
	    src = calculate_user_jetton_wallet_address( sender, my_address(), code );
    }

	var msg_body    = generate_jetton_burn_notification( query_id, burn_amount, sender, admin_address );
	cell msg        = generate_internal_message_custom( 0, 0, 0, msg_body, src, null(), 0);

    if ( exp_fail? ) {
        gas_used    += invoke_method_expect_fail(recv_internal, [one_unit, one_unit, msg, msg_body.end_cell().begin_parse()]);
	    assert_no_actions();
    }
    else {
      var (gas_success, _ ) = invoke_method( recv_internal, [one_unit, one_unit, msg, msg_body.end_cell().begin_parse() ] );
      gas_used += gas_success;

	    tuple actions = parse_c5();
	    throw_unless( 600, actions.tuple_length() == 2 ); ;;Expect burn log message

	    ( int action_type, cell sent_msg, int mode ) = actions.first().untriple();
	    throw_unless( 601, action_type == 0 );
	    throw_unless( 602, mode == 0 );

	    ;; it's mode 64 so msg_value - fees return guaranteed
	    ;; Still have to verify excess structure

	    verify_burn_jetton( query_id, admin_address, one_unit, 0, 0, sent_msg );

	    var( lookup_after, new_supply, _, _ ) = load_test_data();
			gas_used += lookup_after;

	    throw_unless( 603, total_supply - burn_amount == new_supply );

			;; Let's test the log message
			tuple parsed = assert_log_message_simple(610, log_burn_on_minter, actions.second());

			;; And log contents
			slice body   = parsed.at(5);
			throw_unless(620, new_supply == body~load_coins());
    }


	return gas_used;
}

int __test_burn_notification_not_wallet() {
    int mint_amount = (rand(100) + 1) * one_unit;
    int mint_gas    = test_mint(mint_amount, null(), false);
    int burn_failed = test_burn_notification(mint_amount / 10, generate_internal_address(), true);

    int burn_gas    = test_burn_notification(mint_amount / 10, null(), false);

    return mint_gas + burn_gas + burn_failed;
}

int __test_burn_notification_success() {

    int mint_amount = (rand(100) + 1) * one_unit;
    int mint_gas    = test_mint(mint_amount, null(), false);
    int burn_gas    = test_burn_notification(mint_amount / 10, null(), false);

    return mint_gas + burn_gas;
}

int __test_burn_notification_success_max_val() {
    int mint_amount = (1 << 120) - 1;

    int mint_gas    = test_mint(mint_amount, null(), false);
    int burn_gas    = test_burn_notification(mint_amount, null(), false);

    return mint_gas + burn_gas;

}

;; Get methods tests start here

int __test_get_jetton_data() {

	int expect_mintable? = true; ;;Determines if test expects mintable contract


  slice admin_address = set_test_bridge_conf();

	;; var ( total_supply, content, code ) = load_test_data();

	var ( gas_used, stack ) = invoke_method( get_jetton_data, [] );

	throw_unless( 500, stack.tuple_length() == 5 );

	;; throw_unless( 501, total_supply == stack.first() );
	throw_unless( 502, expect_mintable? & stack.second() );
	;;throw_unless( 503, equal_slices( admin_address, stack.third() ) );
	throw_unless( 503, equal_slices( generate_empty_address(), stack.third() ) );

	slice res_cs = stack.fourth().begin_parse(); ;; Content slice

	;; throw_unless( 504, equal_slices( content.begin_parse(), res_cs ) );
	validate_TIP_64( res_cs );
	;; throw_unless( 505, equal_slices( code.begin_parse(), stack.at( 4 ).begin_parse() ) );

	return gas_used;
}

int __test_get_wallet_address() {

	var ( gas_used, stack ) = invoke_method( get_wallet_address, [ my_address() ] );

	throw_unless( 700, stack.tuple_length() == 1 );

	parse_std_addr( stack.first() ); ;;I guess that's what else we can check

	return gas_used;
}
